/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode *root, int level,vector<vector<int>> &v){
        if(root==NULL)
            return;
        if(v.size()<=level)
            v.push_back(vector<int>());
        v[level].push_back(root->val);
        dfs(root->left, level+1, v);
        dfs(root->right, level+1, v);
    }
    vector<vector<int>> levelOrder(TreeNode* root) {
        // vector<vector<int>> v;
        // if(root==NULL)  return v;
        // queue<TreeNode *>q;
        // q.push(root);
        // while(!q.empty()){
        //     vector<int> ans;
        //     for(int i=q.size();i>0;i--){
        //         TreeNode *temp=q.front();
        //         ans.push_back(temp->val);
        //         q.pop();
        //         if(temp->left!=NULL)
        //             q.push(temp->left);
        //         if(temp->right!=NULL)
        //             q.push(temp->right);
        //     }
        //     v.push_back(ans);
        // }
        // return v;
        
        vector<vector<int>> v;
        dfs(root, 0 , v);
        return v;
    }
};
