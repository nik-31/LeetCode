class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        // if(matrix.size()==0)
        //     return false;
        // int j=matrix[0].size()-1;
        // int i=0;
        // while(i<matrix.size() && j>=0){
        //     if(matrix[i][j]>target)
        //         j--;
        //     else if(matrix[i][j]<target)
        //         i++;
        //     else
        //         return true;
        // }
        // return false;
        
        
        //Binary Search Approach
        if(matrix.size()==0)
            return false;
        
        int n=matrix.size();
        int m=matrix[0].size();
        
        int low=0;
        int high=(n*m)-1;
        
        while(low<=high){
            int mid=(low+(high-low)/2);
            if(matrix[mid/m][mid%m]==target)
                return true;
            if(matrix[mid/m][mid%m]>target)
                high=mid-1;
            else
                low=mid+1;
        }
        return false;
    }
};
